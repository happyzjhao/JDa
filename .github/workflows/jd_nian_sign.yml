name: jd_nian_sign 炸年兽签到

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' #此处为UTC-0时间
  watch:
    types: started
  repository_dispatch:
    types: jd_nian
jobs:
  build:

    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Checkout
        run: |
          git clone -b master https://gitlab.com/happyzjhao/jd_scripts.git ~/scripts
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node_modules
        uses: actions/cache@v2 # 使用 GitHub 官方的缓存 Action。
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }} # 使用 package-lock.json 的 Hash 作为缓存的 key。也可以使用 package.json 代替
      - name: '运行炸年兽'
        run: |
          cd  ~/scripts
          unste GITHUB_API_URL
          unste GITHUB_REPOSITORY_OWNER
          unste GITHUB_ACTIONS
          unste GITHUB_HEAD_REF
          unste GITHUB_ACTOR
          unste GITHUB_ACTION_REF
          unste GITHUB_ACTION
          unste GITHUB_ACTION_REPOSITORY
          unste GITHUB_RETENTION_DAYS
          unste GITHUB_ENV
          unste GITHUB_REF
          unste GITHUB_SHA
          unste GITHUB_RUN_ID
          unste GITHUB_SERVER_URL
          unste GITHUB_EVENT_PATH
          unste GITHUB_GRAPHQL_URL
          unste GITHUB_BASE_REF
          unste GITHUB_PATH
          unste GITHUB_JOB
          unste GITHUB_REPOSITORY
          unste GITHUB_EVENT_NAME
          unste GITHUB_RUN_NUMBER
          unste GITHUB_WORKFLOW
          unste GITHUB_WORKSPACE
          npm install
          node jd_nian_sign.js
          node jd_nian_ar.js
          node jd_nh.js
          
        env:
          JD_COOKIE: ${{ secrets.JD_COOKIE }}
          JD_DEBUG: ${{ secrets.JD_DEBUG }}
          PUSH_KEY: ${{ secrets.PUSH_KEY }}
          BARK_PUSH: ${{ secrets.BARK_PUSH }}
          JDNIAN_SHARECODES: ${{ secrets.JDNIAN_SHARECODES }}
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_USER_ID: ${{ secrets.TG_USER_ID }}
          BARK_SOUND: ${{ secrets.BARK_SOUND }}
          DD_BOT_TOKEN: ${{ secrets.DD_BOT_TOKEN }}
          DD_BOT_SECRET: ${{ secrets.DD_BOT_SECRET }}
          IGOT_PUSH_KEY: ${{ secrets.IGOT_PUSH_KEY }}